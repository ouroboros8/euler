'''
Problem:

    The sequence of triangle numbers is generated by adding the
    natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
       10: 1,2,5,10
       15: 1,3,5,15
       21: 1,3,7,21
       28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
'''

from math import floor

def factorise(original_number):
    '''
    Return prime factors of a number
    '''
    current_factor = original_number
    possible_factors = range(2, floor(original_number**0.5)+1)
    prime_factors = []
    while True:
        top_of_loop_factor = current_factor
        for num in possible_factors:
            if current_factor % num == 0:
                current_factor = int(current_factor/num)
                prime_factors.append(int(num))
                break
        if current_factor == 1 or current_factor == original_number:
            break
        if current_factor == top_of_loop_factor:
            prime_factors.append(current_factor)
            break
    return prime_factors


def solve():
    '''
    Solve the problem.
    '''
    return factorise(5*10**12+123)

if __name__ == '__main__':
    print(solve())
