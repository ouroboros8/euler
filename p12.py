#!/usr/bin/env python

# Problem:
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?



from math import *

def factorise(originalNumber):
    currentFactor = originalNumber
    possibleFactors = range(2, floor(originalNumber**0.5)+1)
    primeFactors = []
    while True:
        topOfLoopFactor = currentFactor
        for n in possibleFactors:
            if currentFactor % n == 0:
                currentFactor = int(currentFactor/n)
                primeFactors.append(int(n))
                break
        if currentFactor == 1 or currentFactor == originalNumber:
            break
        if currentFactor == topOfLoopFactor:
            primeFactors.append(currentFactor)
            break
    return primeFactors


print(factorise(5*10**12+123))
