'''
Problem:

    The sequence of triangle numbers is generated by adding the
    natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

        1: 1
        3: 1,3
        6: 1,2,3,6
       10: 1,2,5,10
       15: 1,3,5,15
       21: 1,3,7,21
       28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five
    divisors.

    What is the value of the first triangle number to have over five
    hundred divisors?
'''

def number_of_divisors(number):
    '''
    Return the number of divisors of a number
    '''
    ans = 0
    square_root = int(number**0.5)
    for divisor in range(1, square_root + 1):
        if number % divisor == 0:
            ans = ans + 2
    if number == square_root**2:
        ans = ans - 1
    return ans

def solve():
    '''
    Solve the problem.
    '''
    number = 0
    index = 1
    while number_of_divisors(number) < 500:
        number = number + index
        index = index + 1
    return number

if __name__ == '__main__':
    print(solve())
